rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /drivers/{Drivers} {
      allow read: if getUserData().role.hasAny(['editor', 'admin', 'player']);
      allow update, write, delete, create: if getUserData().role.hasAny(['editor', 'admin']);
    }
    match /season/{Season} {
      allow read: if getUserData().role.hasAny(['editor', 'admin', 'player']);
      allow update,write, delete, create:  if getUserData().role.hasAny(['editor', 'admin']);
    }
    match /season/{Season}/races/{Races} {
      allow read: if getUserData().role.hasAny(['editor', 'admin', 'player']);
      allow update,write, delete, create:  if getUserData().role.hasAny(['editor', 'admin']);
    }
    match /player/{player} {
      allow read: if request.auth.uid == player || getUserData().role.hasAny(['editor', 'admin']); 
      allow update, write: if request.auth.uid == player && notUpdating('role') || request.auth.uid == player && notUpdating('uid') || getUserData().role.hasAny(['editor', 'admin']); 
      allow create, delete: if getUserData().role.hasAny(['editor', 'admin']);
    }  
    function getUserData() {
      return get(/databases/$(database)/documents/player/$(request.auth.uid)).data
    }
    function notUpdating(field) {
      // prevent update of specific document data object - like role 
      return !(field in request.resource.data) || resource.data[field] == request.resource.data[field]
    }
  }
}